{"tests": [{"target": "https://www.pousadaportela.com.br", "endpUUID": "30b47bd8-130d-46a5-8ea6-1e8fabc62307", "endpId": 1, "text": "    @clear_session({'spanId': 1})\n    def test_01_get_(self):\n        # GET https://www.pousadaportela.com.br/ (endp 1)\n        www_pousadaportela_com_br = get_http_client('https://www.pousadaportela.com.br', authenticate)\n        resp = www_pousadaportela_com_br.get('/')\n        resp.assert_ok()\n        # resp.assert_status_code(200)\n        # resp.assert_cssselect('section.mbr-fullscreen div.align-center.container div.row.justify-content-center div h1.mbr-section-title.mbr-fonts-style.mbr-white strong', expected_value='Venha nos visitar UAI !!!')\n        # resp.assert_cssselect('html head title', expected_value='Pousada Portela')\n        # self.assertLess(resp.elapsed.total_seconds(), 0.690)\n\n", "files": [], "redundant": false}, {"target": "https://notify.bugsnag.com", "endpUUID": "d7c5d4e5-b9e6-4861-9075-0b8df418d77c", "endpId": 20, "text": "    @json_dataset('data/20/dataset_20.json')\n    @clear_session({'spanId': 20})\n    def test_20_post_(self, data_row):\n        apiKey, bev, bugsnag_api_key, bugsnag_payload_version, bugsnag_sent_at, clientIp, connection_type, duration, errorMessage, experiments, id_, id1, id2, message, name, payloadVersion, startedAt, time_, timestamp, treatments, trebuchets, url, url1, userAgent, values, version, version1 = data_row\n\n        # POST https://notify.bugsnag.com/ (endp 20)\n        notify_bugsnag_com = get_http_client('https://notify.bugsnag.com', authenticate)\n        with open('data/20/payload_for_endp_20.json', 'r') as json_payload_file:\n            json_payload = json.load(json_payload_file)\n        apply_into_json(json_payload, '$.apiKey', apiKey)\n        apply_into_json(json_payload, '$.events[*].app.duration', duration)\n        apply_into_json(json_payload, '$.events[*].app.version', version)\n        apply_into_json(json_payload, '$.events[*].breadcrumbs[*].name', name)\n        apply_into_json(json_payload, '$.events[*].breadcrumbs[*].timestamp', timestamp)\n        apply_into_json(json_payload, '$.events[*].device.id', id_)\n        apply_into_json(json_payload, '$.events[*].device.time', time_)\n        apply_into_json(json_payload, '$.events[*].device.userAgent', userAgent)\n        apply_into_json(json_payload, '$.events[*].exceptions[*].errorMessage', errorMessage)\n        apply_into_json(json_payload, '$.events[*].exceptions[*].message', message)\n        apply_into_json(json_payload, '$.events[*].metaData.*.experiments[*]', experiments)\n        apply_into_json(json_payload, '$.events[*].metaData.*.treatments[*]', treatments)\n        apply_into_json(json_payload, '$.events[*].metaData.connection_type', connection_type)\n        apply_into_json(json_payload, '$.events[*].metaData.trebuchets.trebuchets[*]', trebuchets)\n        apply_into_json(json_payload, '$.events[*].metaData.trebuchets.values[*]', values)\n        apply_into_json(json_payload, '$.events[*].metaData.user.bev', bev)\n        apply_into_json(json_payload, '$.events[*].payloadVersion', payloadVersion)\n        apply_into_json(json_payload, '$.events[*].request.clientIp', clientIp)\n        apply_into_json(json_payload, '$.events[*].request.url', url)\n        apply_into_json(json_payload, '$.events[*].session.id', id1)\n        apply_into_json(json_payload, '$.events[*].session.startedAt', startedAt)\n        apply_into_json(json_payload, '$.events[*].user.id', id2)\n        apply_into_json(json_payload, '$.notifier.url', url1)\n        apply_into_json(json_payload, '$.notifier.version', version1)\n        resp = notify_bugsnag_com.post('/', json=json_payload, headers={'bugsnag-api-key': bugsnag_api_key, 'bugsnag-payload-version': bugsnag_payload_version, 'bugsnag-sent-at': bugsnag_sent_at})\n        resp.assert_ok()\n        # resp.assert_status_code(200)\n        # self.assertLess(resp.elapsed.total_seconds(), 0.377)\n\n", "files": ["data/20/dataset_20.json", "data/20/payload_for_endp_20.json"], "redundant": false}, {"target": "https://www.airbnb.com.br", "endpUUID": "42e5eef7-b0b7-4d28-b5ad-e2de6616da47", "endpId": 4, "text": "    @json_dataset('data/4/dataset_4.json')\n    @clear_session({'spanId': 4})\n    def test_04_post_param1_param2_9GA_param3_ATJQAQ_WBp_param4(self, data_row):\n        device_memory, ect, param, param1, param2, param3, sensor_data, viewport_width = data_row\n\n        # POST https://www.airbnb.com.br/{param1}/{param2}/9GA/{param3}/ATJQAQ/WBp/{param4} (endp 4)\n        www_airbnb_com_br = get_http_client('https://www.airbnb.com.br', authenticate)\n        with open('data/4/payload_for_endp_4.json', 'r') as json_payload_file:\n            json_payload = json.load(json_payload_file)\n        apply_into_json(json_payload, '$.sensor_data', sensor_data)\n        resp = www_airbnb_com_br.post(f'/{param}/{param1}/9GA/{param2}/ATJQAQ/WBp/{param3}', json=json_payload, headers={'device-memory': device_memory, 'dpr': '2', 'ect': ect, 'viewport-width': viewport_width})\n        resp.assert_ok()\n        # resp.assert_status_code(201)\n        # self.assertLess(resp.elapsed.total_seconds(), 0.347)\n\n", "files": ["data/4/dataset_4.json", "data/4/payload_for_endp_4.json"], "redundant": false}, {"target": "https://www.airbnb.com.br", "endpUUID": "e8a39743-9ace-4831-9182-57795c89f66f", "endpId": 5, "text": "    @json_dataset('data/5/dataset_5.json')\n    @clear_session({'spanId': 5})\n    def test_05_get_api_v2_autosuggestions(self, data_row):\n        currency, device_memory, ect, key, options, viewport_width = data_row\n\n        # GET https://www.airbnb.com.br/api/v2/autosuggestions (endp 5)\n        www_airbnb_com_br = get_http_client('https://www.airbnb.com.br', authenticate)\n        qstr = '?' + urlencode({'currency': currency, 'key': key, 'locale': 'pt', 'options': options, 'refinement_paths[]': '/homes'})\n        resp = www_airbnb_com_br.get('/api/v2/autosuggestions' + qstr, headers={'device-memory': device_memory, 'dpr': '2', 'ect': ect, 'viewport-width': viewport_width})\n        resp.assert_ok()\n        # resp.assert_status_code(200)\n        # resp.assert_jsonpath('$.experiment_data.control_metadata.name', expected_value='control')\n        # self.assertLess(resp.elapsed.total_seconds(), 0.383)\n\n", "files": ["data/5/dataset_5.json"], "redundant": false}, {"target": "https://www.airbnb.com.br", "endpUUID": "e663aaa4-1590-43ac-83b3-3af4f991c59c", "endpId": 6, "text": "    @json_dataset('data/6/dataset_6.json')\n    @clear_session({'spanId': 6})\n    def test_06_post_api_v2_client_configs(self, data_row):\n        currency, device_memory, ect, key, userAttributes, viewport_width, x_csrf_token = data_row\n\n        # POST https://www.airbnb.com.br/api/v2/client_configs (endp 6)\n        www_airbnb_com_br = get_http_client('https://www.airbnb.com.br', authenticate)\n        qstr = '?' + urlencode({'currency': currency, 'key': key, 'locale': 'pt'})\n        with open('data/6/payload_for_endp_6.json', 'r') as json_payload_file:\n            json_payload = json.load(json_payload_file)\n        apply_into_json(json_payload, '$.userAttributes[*]', userAttributes)\n        resp = www_airbnb_com_br.post('/api/v2/client_configs' + qstr, json=json_payload, headers={'device-memory': device_memory, 'dpr': '2', 'ect': ect, 'viewport-width': viewport_width, 'x-csrf-token': x_csrf_token, 'x-csrf-without-token': '1', 'x-requested-with': 'XMLHttpRequest'})\n        resp.assert_ok()\n        # resp.assert_status_code(200)\n        # self.assertLess(resp.elapsed.total_seconds(), 0.273)\n\n", "files": ["data/6/dataset_6.json", "data/6/payload_for_endp_6.json"], "redundant": false}, {"target": "https://www.airbnb.com.br", "endpUUID": "e2fc86cc-d381-45df-b173-2d949de41325", "endpId": 7, "text": "    @json_dataset('data/7/dataset_7.json')\n    @clear_session({'spanId': 7})\n    def test_07_get_api_v2_host_referral_eligibilities(self, data_row):\n        currency, device_memory, ect, key, touch_point, viewport_width, x_csrf_token = data_row\n\n        # GET https://www.airbnb.com.br/api/v2/host_referral_eligibilities (endp 7)\n        www_airbnb_com_br = get_http_client('https://www.airbnb.com.br', authenticate)\n        qstr = '?' + urlencode({'currency': currency, 'key': key, 'locale': 'pt', 'touch_point': touch_point})\n        resp = www_airbnb_com_br.get('/api/v2/host_referral_eligibilities' + qstr, headers={'device-memory': device_memory, 'dpr': '2', 'ect': ect, 'viewport-width': viewport_width, 'x-csrf-token': x_csrf_token, 'x-csrf-without-token': '1', 'x-requested-with': 'XMLHttpRequest'})\n        resp.assert_ok()\n        # resp.assert_status_code(200)\n        # self.assertLess(resp.elapsed.total_seconds(), 0.212)\n\n", "files": ["data/7/dataset_7.json"], "redundant": false}, {"target": "https://www.airbnb.com.br", "endpUUID": "d854557c-f5e6-4450-809e-76fbc34cfdc7", "endpId": 8, "text": "    @json_dataset('data/8/dataset_8.json')\n    @clear_session({'spanId': 8})\n    def test_08_post_api_v2_paid_growth_tracking_datas(self, data_row):\n        _format, currency, device_memory, ect, key, listing_id, viewport_width, x_csrf_token = data_row\n\n        # POST https://www.airbnb.com.br/api/v2/paid_growth_tracking_datas (endp 8)\n        www_airbnb_com_br = get_http_client('https://www.airbnb.com.br', authenticate)\n        qstr = '?' + urlencode({'_format': _format, 'currency': currency, 'key': key, 'locale': 'pt'})\n        with open('data/8/payload_for_endp_8.json', 'r') as json_payload_file:\n            json_payload = json.load(json_payload_file)\n        apply_into_json(json_payload, '$.listing_id', listing_id)\n        resp = www_airbnb_com_br.post('/api/v2/paid_growth_tracking_datas' + qstr, json=json_payload, headers={'device-memory': device_memory, 'dpr': '2', 'ect': ect, 'viewport-width': viewport_width, 'x-csrf-token': x_csrf_token, 'x-csrf-without-token': '1', 'x-requested-with': 'XMLHttpRequest'})\n        resp.assert_ok()\n        # resp.assert_status_code(200)\n        # resp.assert_jsonpath('$.paid_growth_tracking_data.city', expected_value='Baependi')\n        # self.assertLess(resp.elapsed.total_seconds(), 0.343)\n\n", "files": ["data/8/dataset_8.json", "data/8/payload_for_endp_8.json"], "redundant": false}, {"target": "https://www.airbnb.com.br", "endpUUID": "f47ee89d-20de-4ff0-8ea8-90b8e788b3e1", "endpId": 9, "text": "    @json_dataset('data/9/dataset_9.json')\n    @clear_session({'spanId': 9})\n    def test_09_get_api_v2_paid_growth_tracking_datas(self, data_row):\n        currency, device_memory, ect, key, viewport_width, x_csrf_token = data_row\n\n        # GET https://www.airbnb.com.br/api/v2/paid_growth_tracking_datas (endp 9)\n        www_airbnb_com_br = get_http_client('https://www.airbnb.com.br', authenticate)\n        qstr = '?' + urlencode({'currency': currency, 'key': key, 'locale': 'pt'})\n        resp = www_airbnb_com_br.get('/api/v2/paid_growth_tracking_datas' + qstr, headers={'device-memory': device_memory, 'dpr': '2', 'ect': ect, 'viewport-width': viewport_width, 'x-csrf-token': x_csrf_token, 'x-csrf-without-token': '1', 'x-requested-with': 'XMLHttpRequest'})\n        resp.assert_ok()\n        # resp.assert_status_code(200)\n        # resp.assert_jsonpath('$.paid_growth_tracking_data[*].audience_type', expected_value='visitor')\n        # self.assertLess(resp.elapsed.total_seconds(), 0.318)\n\n", "files": ["data/9/dataset_9.json"], "redundant": false}, {"target": "https://www.airbnb.com.br", "endpUUID": "02c4b60e-0177-4ebc-aa0e-e73aa09be565", "endpId": 10, "text": "    @json_dataset('data/10/dataset_10.json')\n    @clear_session({'spanId': 10})\n    def test_10_get_api_v2_user_markets(self, data_row):\n        currency, device_memory, ect, key, viewport_width, x_csrf_token = data_row\n\n        # GET https://www.airbnb.com.br/api/v2/user_markets (endp 10)\n        www_airbnb_com_br = get_http_client('https://www.airbnb.com.br', authenticate)\n        qstr = '?' + urlencode({'currency': currency, 'key': key, 'language': 'pt', 'locale': 'pt'})\n        resp = www_airbnb_com_br.get('/api/v2/user_markets' + qstr, headers={'device-memory': device_memory, 'dpr': '2', 'ect': ect, 'viewport-width': viewport_width, 'x-csrf-token': x_csrf_token, 'x-csrf-without-token': '1', 'x-requested-with': 'XMLHttpRequest'})\n        resp.assert_ok()\n        # resp.assert_status_code(200)\n        # resp.assert_jsonpath('$.user_markets[*].locale', expected_value='pt')\n        # self.assertLess(resp.elapsed.total_seconds(), 0.329)\n\n", "files": ["data/10/dataset_10.json"], "redundant": false}, {"target": "https://www.airbnb.com.br", "endpUUID": "e3b65c18-1bf6-4210-bb15-5089ad5d83b1", "endpId": 11, "text": "    @json_dataset('data/11/dataset_11.json')\n    @clear_session({'spanId': 11})\n    def test_11_get_api_v3_Header(self, data_row):\n        _cb, currency, device_memory, ect, extensions, variables, viewport_width, x_airbnb_api_key, x_csrf_token = data_row\n\n        # GET https://www.airbnb.com.br/api/v3/Header (endp 11)\n        www_airbnb_com_br = get_http_client('https://www.airbnb.com.br', authenticate)\n        qstr = '?' + urlencode({'_cb': _cb, 'currency': currency, 'extensions': extensions, 'locale': 'pt', 'operationName': 'Header', 'variables': variables})\n        resp = www_airbnb_com_br.get('/api/v3/Header' + qstr, headers={'device-memory': device_memory, 'dpr': '2', 'ect': ect, 'viewport-width': viewport_width, 'x-airbnb-api-key': x_airbnb_api_key, 'x-airbnb-graphql-platform': 'web', 'x-airbnb-graphql-platform-client': 'minimalist-niobe', 'x-airbnb-supports-airlock-v2': 'true', 'x-csrf-token': x_csrf_token, 'x-csrf-without-token': '1', 'x-niobe-short-circuited': 'true'})\n        resp.assert_ok()\n        # resp.assert_status_code(200)\n        # resp.assert_jsonpath('$.data.presentation.header.menuItemGroups[*].__typename', expected_value='HeaderItemGroup')\n        # self.assertLess(resp.elapsed.total_seconds(), 0.246)\n\n", "files": ["data/11/dataset_11.json"], "redundant": false}, {"target": "https://www.airbnb.com.br", "endpUUID": "05574b56-33c1-4e62-9948-afe56a77ea9f", "endpId": 12, "text": "    @json_dataset('data/12/dataset_12.json')\n    @clear_session({'spanId': 12})\n    def test_12_get_api_v3_PdpAvailabilityCalendar(self, data_row):\n        _cb, currency, device_memory, ect, extensions, variables, viewport_width, x_airbnb_api_key, x_csrf_token = data_row\n\n        # GET https://www.airbnb.com.br/api/v3/PdpAvailabilityCalendar (endp 12)\n        www_airbnb_com_br = get_http_client('https://www.airbnb.com.br', authenticate)\n        qstr = '?' + urlencode({'_cb': _cb, 'currency': currency, 'extensions': extensions, 'locale': 'pt', 'operationName': 'PdpAvailabilityCalendar', 'variables': variables})\n        resp = www_airbnb_com_br.get('/api/v3/PdpAvailabilityCalendar' + qstr, headers={'device-memory': device_memory, 'dpr': '2', 'ect': ect, 'viewport-width': viewport_width, 'x-airbnb-api-key': x_airbnb_api_key, 'x-airbnb-graphql-platform': 'web', 'x-airbnb-graphql-platform-client': 'minimalist-niobe', 'x-airbnb-supports-airlock-v2': 'true', 'x-csrf-token': x_csrf_token, 'x-csrf-without-token': '1', 'x-niobe-short-circuited': 'true'})\n        resp.assert_ok()\n        # resp.assert_status_code(200)\n        # resp.assert_jsonpath('$.data.merlin.pdpAvailabilityCalendar.calendarMonths[*].__typename', expected_value='MerlinCalendarMonth')\n        # self.assertLess(resp.elapsed.total_seconds(), 0.565)\n\n", "files": ["data/12/dataset_12.json"], "redundant": false}, {"target": "https://www.airbnb.com.br", "endpUUID": "192a4827-5176-4317-b093-69fa014f5821", "endpId": 13, "text": "    @json_dataset('data/13/dataset_13.json')\n    @clear_session({'spanId': 13})\n    def test_13_get_api_v3_PdpPhotoTour(self, data_row):\n        _cb, currency, device_memory, ect, extensions, variables, viewport_width, x_airbnb_api_key, x_csrf_token = data_row\n\n        # GET https://www.airbnb.com.br/api/v3/PdpPhotoTour (endp 13)\n        www_airbnb_com_br = get_http_client('https://www.airbnb.com.br', authenticate)\n        qstr = '?' + urlencode({'_cb': _cb, 'currency': currency, 'extensions': extensions, 'locale': 'pt', 'operationName': 'PdpPhotoTour', 'variables': variables})\n        resp = www_airbnb_com_br.get('/api/v3/PdpPhotoTour' + qstr, headers={'device-memory': device_memory, 'dpr': '2', 'ect': ect, 'viewport-width': viewport_width, 'x-airbnb-api-key': x_airbnb_api_key, 'x-airbnb-graphql-platform': 'web', 'x-airbnb-graphql-platform-client': 'minimalist-niobe', 'x-airbnb-supports-airlock-v2': 'true', 'x-csrf-token': x_csrf_token, 'x-csrf-without-token': '1', 'x-niobe-short-circuited': 'true'})\n        resp.assert_ok()\n        # resp.assert_status_code(200)\n        # resp.assert_jsonpath('$.data.merlin.pdpPhotoTour.saveButton.loggingEventData.section', expected_value='photoTour')\n        # self.assertLess(resp.elapsed.total_seconds(), 0.460)\n\n", "files": ["data/13/dataset_13.json"], "redundant": false}, {"target": "https://www.airbnb.com.br", "endpUUID": "9b6c7327-12d0-4d91-a938-19ece1b453bb", "endpId": 14, "text": "    @json_dataset('data/14/dataset_14.json')\n    @clear_session({'spanId': 14})\n    def test_14_get_api_v3_PdpReviews(self, data_row):\n        _cb, currency, device_memory, ect, extensions, operationName, variables, viewport_width, x_airbnb_api_key, x_csrf_token = data_row\n\n        # GET https://www.airbnb.com.br/api/v3/PdpReviews (endp 14)\n        www_airbnb_com_br = get_http_client('https://www.airbnb.com.br', authenticate)\n        qstr = '?' + urlencode({'_cb': _cb, 'currency': currency, 'extensions': extensions, 'locale': 'pt', 'operationName': operationName, 'variables': variables})\n        resp = www_airbnb_com_br.get('/api/v3/PdpReviews' + qstr, headers={'device-memory': device_memory, 'dpr': '2', 'ect': ect, 'viewport-width': viewport_width, 'x-airbnb-api-key': x_airbnb_api_key, 'x-airbnb-graphql-platform': 'web', 'x-airbnb-graphql-platform-client': 'minimalist-niobe', 'x-airbnb-supports-airlock-v2': 'true', 'x-csrf-token': x_csrf_token, 'x-csrf-without-token': '1', 'x-niobe-short-circuited': 'true'})\n        resp.assert_ok()\n        # resp.assert_status_code(200)\n        # resp.assert_jsonpath('$.data.merlin.__typename', expected_value='MerlinQuery')\n        # self.assertLess(resp.elapsed.total_seconds(), 0.338)\n\n", "files": ["data/14/dataset_14.json"], "redundant": false}, {"target": "https://www.airbnb.com.br", "endpUUID": "66764343-04ed-495e-90be-dee36d634ff5", "endpId": 15, "text": "    @json_dataset('data/15/dataset_15.json')\n    @clear_session({'spanId': 15})\n    def test_15_get_api_v3_SearchBlocksQuery(self, data_row):\n        _cb, currency, device_memory, ect, extensions, variables, viewport_width, x_airbnb_api_key, x_csrf_token = data_row\n\n        # GET https://www.airbnb.com.br/api/v3/SearchBlocksQuery (endp 15)\n        www_airbnb_com_br = get_http_client('https://www.airbnb.com.br', authenticate)\n        qstr = '?' + urlencode({'_cb': _cb, 'currency': currency, 'extensions': extensions, 'locale': 'pt', 'operationName': 'SearchBlocksQuery', 'variables': variables})\n        resp = www_airbnb_com_br.get('/api/v3/SearchBlocksQuery' + qstr, headers={'device-memory': device_memory, 'dpr': '2', 'ect': ect, 'viewport-width': viewport_width, 'x-airbnb-api-key': x_airbnb_api_key, 'x-airbnb-graphql-platform': 'web', 'x-airbnb-graphql-platform-client': 'minimalist-niobe', 'x-airbnb-supports-airlock-v2': 'true', 'x-csrf-token': x_csrf_token, 'x-csrf-without-token': '1', 'x-niobe-short-circuited': 'true'})\n        resp.assert_ok()\n        # resp.assert_status_code(200)\n        # resp.assert_jsonpath('$.data.dora.__typename', expected_value='DoraQuery')\n        # self.assertLess(resp.elapsed.total_seconds(), 0.429)\n\n", "files": ["data/15/dataset_15.json"], "redundant": false}, {"target": "https://www.airbnb.com.br", "endpUUID": "f2637dc8-3826-4e3c-bb57-baa978d89a9c", "endpId": 16, "text": "    @json_dataset('data/16/dataset_16.json')\n    @clear_session({'spanId': 16})\n    def test_16_get_api_v3_StaysPdpSections(self, data_row):\n        _cb, currency, device_memory, ect, extensions, variables, viewport_width, x_airbnb_api_key, x_csrf_token = data_row\n\n        # GET https://www.airbnb.com.br/api/v3/StaysPdpSections (endp 16)\n        www_airbnb_com_br = get_http_client('https://www.airbnb.com.br', authenticate)\n        qstr = '?' + urlencode({'_cb': _cb, 'currency': currency, 'extensions': extensions, 'locale': 'pt', 'operationName': 'StaysPdpSections', 'variables': variables})\n        resp = www_airbnb_com_br.get('/api/v3/StaysPdpSections' + qstr, headers={'device-memory': device_memory, 'dpr': '2', 'ect': ect, 'viewport-width': viewport_width, 'x-airbnb-api-key': x_airbnb_api_key, 'x-airbnb-graphql-platform': 'web', 'x-airbnb-graphql-platform-client': 'minimalist-niobe', 'x-airbnb-supports-airlock-v2': 'true', 'x-csrf-token': x_csrf_token, 'x-csrf-without-token': '1', 'x-niobe-short-circuited': 'true'})\n        resp.assert_ok()\n        # resp.assert_status_code(200)\n        # resp.assert_jsonpath('$.data.presentation.stayProductDetailPage.sections.metadata.pdpType', expected_value='MARKETPLACE')\n        # self.assertLess(resp.elapsed.total_seconds(), 0.418)\n\n", "files": ["data/16/dataset_16.json"], "redundant": false}, {"target": "https://www.airbnb.com.br", "endpUUID": "32c6f6c4-1bf1-4c87-9835-0122b51d7b8f", "endpId": 17, "text": "    @json_dataset('data/17/dataset_17.json')\n    @clear_session({'spanId': 17})\n    def test_17_post_tracking_airdog(self, data_row):\n        device_memory, ect, metric, tags, viewport_width = data_row\n\n        # POST https://www.airbnb.com.br/tracking/airdog (endp 17)\n        www_airbnb_com_br = get_http_client('https://www.airbnb.com.br', authenticate)\n        with open('data/17/payload_for_endp_17.json', 'r') as json_payload_file:\n            json_payload = json.load(json_payload_file)\n        apply_into_json(json_payload, '$[*].metric', metric)\n        apply_into_json(json_payload, '$[*].tags[*]', tags)\n        resp = www_airbnb_com_br.post('/tracking/airdog', json=json_payload, headers={'device-memory': device_memory, 'dpr': '2', 'ect': ect, 'viewport-width': viewport_width})\n        resp.assert_ok()\n        # resp.assert_status_code(204)\n        # self.assertLess(resp.elapsed.total_seconds(), 0.215)\n\n", "files": ["data/17/dataset_17.json", "data/17/payload_for_endp_17.json"], "redundant": false}, {"target": "https://www.airbnb.com.br", "endpUUID": "ff6de33a-80a7-4da9-9b73-208d085be21f", "endpId": 18, "text": "    @json_dataset('data/18/dataset_18.json')\n    @clear_session({'spanId': 18})\n    def test_18_post_tracking_jitney_logging_messages(self, data_row):\n        accuracy_rating, action, action_type, bev, cache_hit_ratio, canonical_host, canonical_url, checkin_rating, cleanliness_rating, client_session_id, client_version, communication_rating, component, count, count1, count2, count3, custom_data, decodedbody_size, decodedbody_size1, decodedbody_size2, decodedbody_size3, device_id, device_memory, device_year_class, document_age, domain_and_path, downlink, ect, effective_type, encodedbody_size, encodedbody_size1, encodedbody_size2, encodedbody_size3, event_data, event_data1, event_data2, event_data_schema, event_data_schema1, event_id, event_name, event_name1, experiment, external_stylesheet_rules, guest_satisfaction_overall, had_cached_data, hosting_id, http_method, http_status_code, impression_uuid, impression_uuid1, inline_stylesheet_rules, lcp, listing_id, listing_lat, listing_lng, location_rating, logging_id, longest_blocking_time, network_deserialization_latency_ms, operation, operation_id, operation_name, page, page_name, page_name1, page_referrer, page_uri, page_view_duration, picture_count, recorder_duration, referrer, remarketing_id, req_uuid, request_strategy, rtt, schema, schema1, screen_height, screen_width, subject_id, subject_type, tbt, total_view_duration, trackingjs_logging_version, transfer_size, transfer_size1, transfer_size2, transfer_size3, treatment, ttfcp, ttfmp, url, user_agent, user_bucket, utc_offset, uuid_, value_rating, version, viewport_width, visitor_id, visitor_id1, web_tab_uuid = data_row\n\n        # POST https://www.airbnb.com.br/tracking/jitney/logging/messages (endp 18)\n        www_airbnb_com_br = get_http_client('https://www.airbnb.com.br', authenticate)\n        with open('data/18/payload_for_endp_18.json', 'r') as json_payload_file:\n            json_payload = json.load(json_payload_file)\n        apply_into_json(json_payload, '$[*].event_data.*', event_data)\n        apply_into_json(json_payload, '$[*].event_data.accuracy_rating', accuracy_rating)\n        apply_into_json(json_payload, '$[*].event_data.amenities[*]', int(random.randint(1, 510)))\n        apply_into_json(json_payload, '$[*].event_data.app_logging_context.active_sessions[*].event_data', event_data1)\n        apply_into_json(json_payload, '$[*].event_data.app_logging_context.active_sessions[*].event_data_schema', event_data_schema)\n        apply_into_json(json_payload, '$[*].event_data.app_logging_context.active_sessions[*].uuid', uuid_)\n        apply_into_json(json_payload, '$[*].event_data.app_logging_context.web_tab_uuid', web_tab_uuid)\n        apply_into_json(json_payload, '$[*].event_data.assets.css.count', count)\n        apply_into_json(json_payload, '$[*].event_data.assets.css.decodedbody_size', decodedbody_size)\n        apply_into_json(json_payload, '$[*].event_data.assets.css.encodedbody_size', encodedbody_size)\n        apply_into_json(json_payload, '$[*].event_data.assets.css.transfer_size', transfer_size)\n        apply_into_json(json_payload, '$[*].event_data.assets.font.count', count1)\n        apply_into_json(json_payload, '$[*].event_data.assets.font.decodedbody_size', decodedbody_size1)\n        apply_into_json(json_payload, '$[*].event_data.assets.font.encodedbody_size', encodedbody_size1)\n        apply_into_json(json_payload, '$[*].event_data.assets.font.transfer_size', transfer_size1)\n        apply_into_json(json_payload, '$[*].event_data.assets.img.count', count2)\n        apply_into_json(json_payload, '$[*].event_data.assets.img.decodedbody_size', decodedbody_size2)\n        apply_into_json(json_payload, '$[*].event_data.assets.img.encodedbody_size', encodedbody_size2)\n        apply_into_json(json_payload, '$[*].event_data.assets.img.transfer_size', transfer_size2)\n        apply_into_json(json_payload, '$[*].event_data.assets.js.airbnb.cache_hit_ratio', cache_hit_ratio)\n        apply_into_json(json_payload, '$[*].event_data.assets.js.airbnb.count', count3)\n        apply_into_json(json_payload, '$[*].event_data.assets.js.airbnb.decodedbody_size', decodedbody_size3)\n        apply_into_json(json_payload, '$[*].event_data.assets.js.airbnb.encodedbody_size', encodedbody_size3)\n        apply_into_json(json_payload, '$[*].event_data.assets.js.airbnb.transfer_size', transfer_size3)\n        apply_into_json(json_payload, '$[*].event_data.cache_response_byte_size', int(random.randint(758, 6921)))\n        apply_into_json(json_payload, '$[*].event_data.checkin_rating', checkin_rating)\n        apply_into_json(json_payload, '$[*].event_data.cleanliness_rating', cleanliness_rating)\n        apply_into_json(json_payload, '$[*].event_data.client_version', client_version)\n        apply_into_json(json_payload, '$[*].event_data.communication_rating', communication_rating)\n        apply_into_json(json_payload, '$[*].event_data.component', component)\n        apply_into_json(json_payload, '$[*].event_data.context.bev', bev)\n        apply_into_json(json_payload, '$[*].event_data.context.client_session_id', client_session_id)\n        apply_into_json(json_payload, '$[*].event_data.context.device.device_year_class', device_year_class)\n        apply_into_json(json_payload, '$[*].event_data.context.impression_uuid', impression_uuid)\n        apply_into_json(json_payload, '$[*].event_data.context.page_name', page_name)\n        apply_into_json(json_payload, '$[*].event_data.context.screen_height', screen_height)\n        apply_into_json(json_payload, '$[*].event_data.context.screen_width', screen_width)\n        apply_into_json(json_payload, '$[*].event_data.context.timestamp', int(int(time.time() * 1000)))\n        apply_into_json(json_payload, '$[*].event_data.context.user_agent', user_agent)\n        apply_into_json(json_payload, '$[*].event_data.context.version', version)\n        apply_into_json(json_payload, '$[*].event_data.context.visitor_id', visitor_id)\n        apply_into_json(json_payload, '$[*].event_data.context.web.action', action)\n        apply_into_json(json_payload, '$[*].event_data.context.web.canonical_host', canonical_host)\n        apply_into_json(json_payload, '$[*].event_data.context.web.canonical_url', canonical_url)\n        apply_into_json(json_payload, '$[*].event_data.context.web.page_referrer', page_referrer)\n        apply_into_json(json_payload, '$[*].event_data.context.web.page_uri', page_uri)\n        apply_into_json(json_payload, '$[*].event_data.context.web.req_uuid', req_uuid)\n        apply_into_json(json_payload, '$[*].event_data.custom_data', custom_data)\n        apply_into_json(json_payload, '$[*].event_data.device_id', device_id)\n        apply_into_json(json_payload, '$[*].event_data.document_age', document_age)\n        apply_into_json(json_payload, '$[*].event_data.domain_and_path', domain_and_path)\n        apply_into_json(json_payload, '$[*].event_data.event_data', event_data2)\n        apply_into_json(json_payload, '$[*].event_data.event_data_schema', event_data_schema1)\n        apply_into_json(json_payload, '$[*].event_data.event_id', event_id)\n        apply_into_json(json_payload, '$[*].event_data.event_name', event_name)\n        apply_into_json(json_payload, '$[*].event_data.experiment', experiment)\n        apply_into_json(json_payload, '$[*].event_data.external_stylesheet_rules', external_stylesheet_rules)\n        apply_into_json(json_payload, '$[*].event_data.first_response_latency_ms', int(random.randint(0, 582)))\n        apply_into_json(json_payload, '$[*].event_data.guest_satisfaction_overall', guest_satisfaction_overall)\n        apply_into_json(json_payload, '$[*].event_data.had_cached_data', had_cached_data)\n        apply_into_json(json_payload, '$[*].event_data.hosting_id', hosting_id)\n        apply_into_json(json_payload, '$[*].event_data.http_method', http_method)\n        apply_into_json(json_payload, '$[*].event_data.http_status_code', http_status_code)\n        apply_into_json(json_payload, '$[*].event_data.impression_uuid', impression_uuid1)\n        apply_into_json(json_payload, '$[*].event_data.inline_stylesheet_rules', inline_stylesheet_rules)\n        apply_into_json(json_payload, '$[*].event_data.lcp', lcp)\n        apply_into_json(json_payload, '$[*].event_data.listing_id', listing_id)\n        apply_into_json(json_payload, '$[*].event_data.listing_lat', listing_lat)\n        apply_into_json(json_payload, '$[*].event_data.listing_lng', listing_lng)\n        apply_into_json(json_payload, '$[*].event_data.location_rating', location_rating)\n        apply_into_json(json_payload, '$[*].event_data.logging_id', logging_id)\n        apply_into_json(json_payload, '$[*].event_data.longest_blocking_time', longest_blocking_time)\n        apply_into_json(json_payload, '$[*].event_data.network_deserialization_latency_ms', network_deserialization_latency_ms)\n        apply_into_json(json_payload, '$[*].event_data.network_information.downlink', downlink)\n        apply_into_json(json_payload, '$[*].event_data.network_information.effective_type', effective_type)\n        apply_into_json(json_payload, '$[*].event_data.network_information.rtt', rtt)\n        apply_into_json(json_payload, '$[*].event_data.network_load_latency_ms', int(random.randint(288, 578)))\n        apply_into_json(json_payload, '$[*].event_data.network_request_latency_ms', int(random.randint(288, 578)))\n        apply_into_json(json_payload, '$[*].event_data.network_response_byte_size', int(random.randint(758, 6921)))\n        apply_into_json(json_payload, '$[*].event_data.niobe_client_overhead_ms', int(random.randint(0, 4)))\n        apply_into_json(json_payload, '$[*].event_data.operation', operation)\n        apply_into_json(json_payload, '$[*].event_data.operation_id', operation_id)\n        apply_into_json(json_payload, '$[*].event_data.operation_name', operation_name)\n        apply_into_json(json_payload, '$[*].event_data.page', page)\n        apply_into_json(json_payload, '$[*].event_data.page_name', page_name1)\n        apply_into_json(json_payload, '$[*].event_data.page_navigation_action.action_type', action_type)\n        apply_into_json(json_payload, '$[*].event_data.page_navigation_action.duration_checkpoint_data.page_view_duration', page_view_duration)\n        apply_into_json(json_payload, '$[*].event_data.page_navigation_action.duration_checkpoint_data.total_view_duration', total_view_duration)\n        apply_into_json(json_payload, '$[*].event_data.picture_count', picture_count)\n        apply_into_json(json_payload, '$[*].event_data.recorder_duration', recorder_duration)\n        apply_into_json(json_payload, '$[*].event_data.referrer', referrer)\n        apply_into_json(json_payload, '$[*].event_data.remarketing_id', remarketing_id)\n        apply_into_json(json_payload, '$[*].event_data.request_strategy', request_strategy)\n        apply_into_json(json_payload, '$[*].event_data.schema', schema)\n        apply_into_json(json_payload, '$[*].event_data.subject_id', subject_id)\n        apply_into_json(json_payload, '$[*].event_data.subject_type', subject_type)\n        apply_into_json(json_payload, '$[*].event_data.tbt', tbt)\n        apply_into_json(json_payload, '$[*].event_data.total_latency_ms', int(random.randint(0, 582)))\n        apply_into_json(json_payload, '$[*].event_data.total_response_latency_ms', int(random.randint(0, 582)))\n        apply_into_json(json_payload, '$[*].event_data.treatment', treatment)\n        apply_into_json(json_payload, '$[*].event_data.ttfcp', ttfcp)\n        apply_into_json(json_payload, '$[*].event_data.ttfmp', ttfmp)\n        apply_into_json(json_payload, '$[*].event_data.url', url)\n        apply_into_json(json_payload, '$[*].event_data.user_bucket', user_bucket)\n        apply_into_json(json_payload, '$[*].event_data.utc_offset', utc_offset)\n        apply_into_json(json_payload, '$[*].event_data.uuid', str(uuid.uuid4()))\n        apply_into_json(json_payload, '$[*].event_data.value_rating', value_rating)\n        apply_into_json(json_payload, '$[*].event_data.visitor_id', visitor_id1)\n        apply_into_json(json_payload, '$[*].event_data.web_performance_timing.*', int(random.randint(0, 1636402242423)))\n        apply_into_json(json_payload, '$[*].event_data.web_performance_timing.navigation_start_timestamp_in_ms', int(int(time.time() * 1000)))\n        apply_into_json(json_payload, '$[*].event_name', event_name1)\n        apply_into_json(json_payload, '$[*].schema', schema1)\n        apply_into_json(json_payload, '$[*].trackingjs_logging_version', trackingjs_logging_version)\n        apply_into_json(json_payload, '$[*].uuid', str(uuid.uuid4()))\n        resp = www_airbnb_com_br.post('/tracking/jitney/logging/messages', json=json_payload, headers={'device-memory': device_memory, 'dpr': '2', 'ect': ect, 'viewport-width': viewport_width})\n        resp.assert_ok()\n        # resp.assert_status_code(204)\n        # self.assertLess(resp.elapsed.total_seconds(), 0.221)\n\n", "files": ["data/18/dataset_18.json", "data/18/payload_for_endp_18.json"], "redundant": false}], "globalFiles": ["__init__.py", "up9lib.py", "authentication.py", "header.py", "test_www_pousadaportela_com_br.py", "test_notify_bugsnag_com.py", "test_www_airbnb_com_br.py"]}